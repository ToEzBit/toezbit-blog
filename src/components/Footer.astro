---
import { Icon } from "astro-icon/components";
import { cn } from "../lib/cn";

const isHomePage = Astro.url.pathname === "/";
const path = Astro.url.pathname;

const splitPath = path.split("/");
const blogName = splitPath[splitPath.length - 1];
---

<footer class="bg-secondary flex items-center justify-between">
  <div class="flex items-center gap-4">
    <div
      id="statusCommandBar"
      class={cn("bg-primary w-fit pl-2 pr-4", !isHomePage && "bg-success")}
      style="clip-path: polygon(0% 0%, 90% 0, 100% 50%, 90% 100%, 0% 100%);"
    >
      <p class="text-secondary font-bold" id="statusCommandBarText">
        {isHomePage ? "NORMAL" : "INSERT"}
      </p>
    </div>
    <div class="flex gap-2 items-center text-text-primary">
      <Icon name="git-branch" />
      <p>{isHomePage ? "toezbit - main" : blogName}</p>
    </div>
    <div class="flex gap-2 items-center text-text-primary">
      <p id="keyPressDisplay">[No Name]</p>
      <p>[-]</p>
    </div>
  </div>
  <div class="flex
        gap-4">
    <div class="flex items-center text-warning gap-2">
      <Icon name="box" />
      <p>4</p>
      <Icon name="chevron-compact-left" class="text-text-primary" />
    </div>
    <div class="flex items-center text-text-primary gap-2">
      <Icon name="linux" />

      <Icon name="chevron-compact-left" class="text-text-primary" />
    </div>
    <div class="flex items-center text-text-primary gap-2">
      <Icon name="menu" />
      <p>sigma</p>
      <Icon name="chevron-compact-left" class="text-text-primary" />
      <p>88%</p>
    </div>
    <div
      class="bg-primary w-fit pl-4 pr-2"
      style="clip-path: polygon(10% 0%, 100% 0, 100% 100%, 10% 100%, 0% 50%);"
    >
      <p class="text-secondary font-bold">88:88</p>
    </div>
  </div>
</footer>

<script>
  let keyPress = "";
  let isCommandMode = false;
  const rootStyles = getComputedStyle(document.documentElement);

  const warningColor = rootStyles.getPropertyValue("--color-warning").trim();
  const successColor = rootStyles.getPropertyValue("--color-success").trim();

  const onHandleCommand = (shortcut: string) => {
    if (shortcut === ":q") {
      window.location.href = "/";
    }
    if (shortcut === ":help") {
      window.location.href = "/blog/help";
    }
  };

  const onHandleShowCommandText = (text: string) => {
    const display = document.getElementById("keyPressDisplay");
    if (display) {
      display.textContent = text;
    }
  };

  const onHandleStatusBar = (text: string, color: string) => {
    const statusCommandBar = document.getElementById("statusCommandBar");
    const statusCommandBarText = document.getElementById(
      "statusCommandBarText"
    );

    if (statusCommandBar && statusCommandBarText) {
      statusCommandBar.style.backgroundColor = color;
      statusCommandBarText.textContent = text;
    }
  };

  window?.addEventListener("keydown", (e) => {
    if (e.key === "Shift") return;
    if (e.key === ":") {
      isCommandMode = true;

      onHandleStatusBar("COMMAND", warningColor);
    }

    if (!isCommandMode) return;

    if (e.key === "Backspace") {
      if (keyPress.length > 1) {
        const updatedKeyPress = keyPress.slice(0, -1);
        keyPress = updatedKeyPress;
        onHandleShowCommandText(keyPress);
      }
      return;
    }
    if (e.key === "Enter") {
      onHandleCommand(keyPress);
      keyPress = "";
      onHandleShowCommandText(keyPress);
      onHandleStatusBar("INSERT", successColor);
      return;
    }

    if (e.key === "Escape") {
      isCommandMode = false;
      keyPress = "";
      onHandleShowCommandText("[No Name]");
      onHandleStatusBar("INSERT", successColor);
      return;
    }

    keyPress += e.key.toLowerCase();
    onHandleShowCommandText(keyPress);
  });
</script>

<script is:inline>
  const leftSideBar = document.getElementById("leftSidebar");

  let keyPress = "";
  let timeoutId;

  window?.addEventListener("keydown", (e) => {
    keyPress += e.key.toLowerCase();

    if (keyPress === " ee") {
      onToggleSidebar(leftSideBar);
      keyPress = "";
    }

    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => {
      keyPress = "";
    }, 1000);
  });
</script>
