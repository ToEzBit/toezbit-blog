---
import "../styles/global.css";
import "../styles/blog.css";
import Footer from "../components/Footer.astro";
import LeftSidebar from "../components/LeftSidebar.astro";
import RightSidebar from "../components/RightSidebar.astro";

const { headings } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>ToEzBit Blog</title>
  </head>
  <body class="bg-background flex flex-col">
    <div class="flex flex-1 overflow-hidden">
      <LeftSidebar defaultOpen={true} />
      <div class="flex-1 overflow-y-auto max-h-screen">
        <slot />
      </div>
      <RightSidebar headings={headings} />
    </div>
    <Footer />
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    font-family: "NerdFont", sans-serif;
    font-weight: 400;
  }
</style>

<script is:inline src="/toggle-sidebar.js"></script>

<script>
  let keyPress = "";
  let isCommandMode = false;
  const rootStyles = getComputedStyle(document.documentElement);

  const warningColor = rootStyles.getPropertyValue("--color-warning").trim();
  const successColor = rootStyles.getPropertyValue("--color-success").trim();

  const onHandleCommand = (shortcut: string) => {
    if (shortcut === ":q") {
      window.location.href = "/";
    }
    if (shortcut === ":help") {
      window.location.href = "/blog/help";
    }
  };

  const onHandleShowCommandText = (text: string) => {
    const display = document.getElementById("keyPressDisplay");
    if (display) {
      display.textContent = text;
    }
  };

  const onHandleStatusBar = (text: string, color: string) => {
    const statusCommandBar = document.getElementById("statusCommandBar");
    const statusCommandBarText = document.getElementById(
      "statusCommandBarText"
    );

    if (statusCommandBar && statusCommandBarText) {
      statusCommandBar.style.backgroundColor = color;
      statusCommandBarText.textContent = text;
    }
  };

  window?.addEventListener("keydown", (e) => {
    if (e.key === "Shift") return;
    if (e.key === ":") {
      isCommandMode = true;

      onHandleStatusBar("COMMAND", warningColor);
    }

    if (!isCommandMode) return;

    if (e.key === "Backspace") {
      if (keyPress.length > 1) {
        const updatedKeyPress = keyPress.slice(0, -1);
        keyPress = updatedKeyPress;
        onHandleShowCommandText(keyPress);
      }
      return;
    }
    if (e.key === "Enter") {
      onHandleCommand(keyPress);
      keyPress = "";
      onHandleShowCommandText(keyPress);
      onHandleStatusBar("INSERT", successColor);
      return;
    }

    if (e.key === "Escape") {
      isCommandMode = false;
      keyPress = "";
      onHandleShowCommandText("[No Name]");
      onHandleStatusBar("INSERT", successColor);
      return;
    }

    keyPress += e.key.toLowerCase();
    onHandleShowCommandText(keyPress);
  });
</script>

<script is:inline>
  const leftSideBar = document.getElementById("leftSidebar");

  let keyPress = "";
  let timeoutId;

  window?.addEventListener("keydown", (e) => {
    keyPress += e.key.toLowerCase();

    if (keyPress === " ee") {
      onToggleSidebar(leftSideBar);
      keyPress = "";
    }

    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => {
      keyPress = "";
    }, 1000);
  });
</script>
